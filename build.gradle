plugins {
    id 'maven-publish'
    id 'tk.sciwhiz12.gradle.simplversion' version '0.1.0'
    id 'net.neoforged.gradle.userdev' version '7.0.61'
}

versions {
    stripPattern = /^\d+\.\d+\.[\dx]+-/
}
version = versions.version
println "Mod version: $version"

sourceSets {
    data
    main.resources {
        srcDirs += data.resources.srcDirs
        exclude '.cache/'
    }
}

print "Java: ${System.getProperty('java.version')}"
print ", JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})"
println ", Arch: ${System.getProperty('os.arch')}"

runs {
    configureEach {
        workingDirectory project.file('run/' + it.name) as File

        systemProperty 'forge.logging.markers', logging_markers
        systemProperty 'forge.logging.console.level', logging_console
        
        modSource sourceSets.main
    }
    
    client {
    }
    
    server {
        programArgument '--nogui'
    }
    
    gameTestServer {
    }
    
    data {
        programArguments.addAll '--mod', modid, '--all'
        programArguments.addAll '--output', sourceSets.data.resources.srcDirs[0].toString()
        programArguments.addAll '--existing', sourceSets.main.resources.srcDirs[0].toString()
        
        modSource sourceSets.data
    }
}

configurations {
    dataImplementation.extendsFrom implementation
}

repositories {
    maven { // Repository for JEI
        name = 'Progwml6'
        url = 'https://dvs1.progwml6.com/files/maven/'
        content {
            includeGroupAndSubgroups 'mezz.jei'
        }
    }
    maven { // Fallback repository for JEI
        name = 'ModMaven'
        url = 'https://modmaven.dev'
        content {
            includeGroupAndSubgroups 'mezz.jei'
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    dataImplementation sourceSets.main.output

    compileOnly "mezz.jei:jei-${jei_mc_version}-common-api:${jei_version}"
    // Until JEI updates to support NeoForge, leave out the runtime (but still depend on the APIs)
}

java {
    archivesBaseName = "${project.name}-${mc_version}"
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
}

var manifestAttributes = [
        'Specification-Title'   : modid,
        'Specification-Vendor'  : author,
        'Specification-Version' : versions.rawVersion,
        'Implementation-Title'  : project.name,
        'Implementation-Version': project.version,
        'Implementation-Vendor' : author,
        "Git-Commit"            : versions.fullCommitId,
        "Git-Commit-Timestamp"  : versions.commitTimestamp
] as LinkedHashMap

tasks.withType(Jar).configureEach {
    manifest.attributes(manifestAttributes)
    includeEmptyDirs false
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    // Normalize line endings from CRLF to LF
    filesMatching('META-INF/mods.toml') {
        //noinspection UnnecessaryQualifiedReference
        filter(org.apache.tools.ant.filters.FixCrLfFilter.class,
                eol: org.apache.tools.ant.filters.FixCrLfFilter.CrLf.newInstance('lf'))
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publishing {
    publications.create('mavenJava', MavenPublication) {
        from components.java

        it.artifactId = project.name
        it.version = "$mc_version-$versions.simpleVersion"
    }

    repositories {
        maven {
            name 'projectLocal'
            url project.file('repo').absolutePath
        }
    }
}
